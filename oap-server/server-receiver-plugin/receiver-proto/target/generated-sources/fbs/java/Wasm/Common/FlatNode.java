// automatically generated by the FlatBuffers compiler, do not modify

package Wasm.Common;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class FlatNode extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_1_12_0(); }
  public static FlatNode getRootAsFlatNode(ByteBuffer _bb) { return getRootAsFlatNode(_bb, new FlatNode()); }
  public static FlatNode getRootAsFlatNode(ByteBuffer _bb, FlatNode obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public FlatNode __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public String name() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer nameAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer nameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  public String namespace() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer namespaceAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer namespaceInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  public Wasm.Common.KeyVal labels(int j) { return labels(new Wasm.Common.KeyVal(), j); }
  public Wasm.Common.KeyVal labels(Wasm.Common.KeyVal obj, int j) { int o = __offset(8); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int labelsLength() { int o = __offset(8); return o != 0 ? __vector_len(o) : 0; }
  public Wasm.Common.KeyVal labelsByKey(String key) { int o = __offset(8); return o != 0 ? Wasm.Common.KeyVal.__lookup_by_key(null, __vector(o), key, bb) : null; }
  public Wasm.Common.KeyVal labelsByKey(Wasm.Common.KeyVal obj, String key) { int o = __offset(8); return o != 0 ? Wasm.Common.KeyVal.__lookup_by_key(obj, __vector(o), key, bb) : null; }
  public Wasm.Common.KeyVal.Vector labelsVector() { return labelsVector(new Wasm.Common.KeyVal.Vector()); }
  public Wasm.Common.KeyVal.Vector labelsVector(Wasm.Common.KeyVal.Vector obj) { int o = __offset(8); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  public String owner() { int o = __offset(10); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer ownerAsByteBuffer() { return __vector_as_bytebuffer(10, 1); }
  public ByteBuffer ownerInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 10, 1); }
  public String workloadName() { int o = __offset(12); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer workloadNameAsByteBuffer() { return __vector_as_bytebuffer(12, 1); }
  public ByteBuffer workloadNameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 12, 1); }
  public Wasm.Common.KeyVal platformMetadata(int j) { return platformMetadata(new Wasm.Common.KeyVal(), j); }
  public Wasm.Common.KeyVal platformMetadata(Wasm.Common.KeyVal obj, int j) { int o = __offset(14); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int platformMetadataLength() { int o = __offset(14); return o != 0 ? __vector_len(o) : 0; }
  public Wasm.Common.KeyVal platformMetadataByKey(String key) { int o = __offset(14); return o != 0 ? Wasm.Common.KeyVal.__lookup_by_key(null, __vector(o), key, bb) : null; }
  public Wasm.Common.KeyVal platformMetadataByKey(Wasm.Common.KeyVal obj, String key) { int o = __offset(14); return o != 0 ? Wasm.Common.KeyVal.__lookup_by_key(obj, __vector(o), key, bb) : null; }
  public Wasm.Common.KeyVal.Vector platformMetadataVector() { return platformMetadataVector(new Wasm.Common.KeyVal.Vector()); }
  public Wasm.Common.KeyVal.Vector platformMetadataVector(Wasm.Common.KeyVal.Vector obj) { int o = __offset(14); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  public String istioVersion() { int o = __offset(16); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer istioVersionAsByteBuffer() { return __vector_as_bytebuffer(16, 1); }
  public ByteBuffer istioVersionInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 16, 1); }
  public String meshId() { int o = __offset(18); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer meshIdAsByteBuffer() { return __vector_as_bytebuffer(18, 1); }
  public ByteBuffer meshIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 18, 1); }
  public String appContainers(int j) { int o = __offset(20); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int appContainersLength() { int o = __offset(20); return o != 0 ? __vector_len(o) : 0; }
  public StringVector appContainersVector() { return appContainersVector(new StringVector()); }
  public StringVector appContainersVector(StringVector obj) { int o = __offset(20); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  public String clusterId() { int o = __offset(22); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer clusterIdAsByteBuffer() { return __vector_as_bytebuffer(22, 1); }
  public ByteBuffer clusterIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 22, 1); }

  public static int createFlatNode(FlatBufferBuilder builder,
      int nameOffset,
      int namespaceOffset,
      int labelsOffset,
      int ownerOffset,
      int workload_nameOffset,
      int platform_metadataOffset,
      int istio_versionOffset,
      int mesh_idOffset,
      int app_containersOffset,
      int cluster_idOffset) {
    builder.startTable(10);
    FlatNode.addClusterId(builder, cluster_idOffset);
    FlatNode.addAppContainers(builder, app_containersOffset);
    FlatNode.addMeshId(builder, mesh_idOffset);
    FlatNode.addIstioVersion(builder, istio_versionOffset);
    FlatNode.addPlatformMetadata(builder, platform_metadataOffset);
    FlatNode.addWorkloadName(builder, workload_nameOffset);
    FlatNode.addOwner(builder, ownerOffset);
    FlatNode.addLabels(builder, labelsOffset);
    FlatNode.addNamespace(builder, namespaceOffset);
    FlatNode.addName(builder, nameOffset);
    return FlatNode.endFlatNode(builder);
  }

  public static void startFlatNode(FlatBufferBuilder builder) { builder.startTable(10); }
  public static void addName(FlatBufferBuilder builder, int nameOffset) { builder.addOffset(0, nameOffset, 0); }
  public static void addNamespace(FlatBufferBuilder builder, int namespaceOffset) { builder.addOffset(1, namespaceOffset, 0); }
  public static void addLabels(FlatBufferBuilder builder, int labelsOffset) { builder.addOffset(2, labelsOffset, 0); }
  public static int createLabelsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startLabelsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addOwner(FlatBufferBuilder builder, int ownerOffset) { builder.addOffset(3, ownerOffset, 0); }
  public static void addWorkloadName(FlatBufferBuilder builder, int workloadNameOffset) { builder.addOffset(4, workloadNameOffset, 0); }
  public static void addPlatformMetadata(FlatBufferBuilder builder, int platformMetadataOffset) { builder.addOffset(5, platformMetadataOffset, 0); }
  public static int createPlatformMetadataVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startPlatformMetadataVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addIstioVersion(FlatBufferBuilder builder, int istioVersionOffset) { builder.addOffset(6, istioVersionOffset, 0); }
  public static void addMeshId(FlatBufferBuilder builder, int meshIdOffset) { builder.addOffset(7, meshIdOffset, 0); }
  public static void addAppContainers(FlatBufferBuilder builder, int appContainersOffset) { builder.addOffset(8, appContainersOffset, 0); }
  public static int createAppContainersVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startAppContainersVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addClusterId(FlatBufferBuilder builder, int clusterIdOffset) { builder.addOffset(9, clusterIdOffset, 0); }
  public static int endFlatNode(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishFlatNodeBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset); }
  public static void finishSizePrefixedFlatNodeBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public FlatNode get(int j) { return get(new FlatNode(), j); }
    public FlatNode get(FlatNode obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

